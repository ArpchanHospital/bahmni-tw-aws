---

- ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region:           "{{ aws_region }}"
    filters:
      instance-state-name: running
      'tag:type': "{{ config.proxy_type }}"
  register: proxy_instances

- name: Add proxy to dynamic host group
  add_host:
    name: "{{ item.tags.Name }}"
    groupname: gatewayed
    ansible_ssh_host: "{{ item.private_ip_address }}"
    ansible_user: centos
  with_items: "{{ proxy_instances.instances }}"

- name: insert frontend configuration in haproxy config
  delegate_to: "{{ item.tags.Name }}"
  blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK docker items frontend proxy config -->"
    insertafter: "#docker container haproxy config frontend"
    state: present
    block: |+1
      {% for item in containers %}
        acl {{ item.name }} req.ssl_sni -i {{ item.name }}.mybahmni.org
        use_backend {{item.name}} if {{item.name }}
        acl {{ item.name }}_erp req.ssl_sni -i erp-{{ item.name }}.mybahmni.org
        use_backend {{item.name}}_erp if {{ item.name }}_erp
      {% endfor %}
  with_items: "{{ proxy_instances.instances }}"

- name: insert backend configuration in haproxy config
  delegate_to: "{{ item.tags.Name }}"
  blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK docker items backend proxy config -->"
    insertafter: "#docker container haproxy config backend"
    state: present
    block: |
      {% for item in containers %}
      backend {{ item.name }}
        mode tcp
        option ssl-hello-chk
        server {{ item.name }} {{ docker_instance_IP }}:{{ item.https_port }} check
      backend {{ item.name }}_erp
        mode tcp
        server {{ item.name }} {{ docker_instance_IP }}:{{ item.erp_port}}
      {% endfor %}
  with_items: "{{ proxy_instances.instances }}"

- name: Restart haproxy
  delegate_to: "{{ item.tags.Name }}"
  become: yes
  service: name=haproxy state=reloaded
  with_items: "{{ proxy_instances.instances }}"